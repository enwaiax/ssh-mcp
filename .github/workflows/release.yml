name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Update version
      run: |
        # Update version in pyproject.toml
        sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
        
    - name: Install dependencies and run tests
      run: |
        uv sync --all-extras --dev
        uv run pytest tests/ -v
        uv run ruff check python_src/
        uv run ruff format --check python_src/
        
    - name: Build package
      run: |
        uv build
        
    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "chore: bump version to v${{ github.event.inputs.version }}"
        git push origin main
        
    - name: Create and push tag
      run: |
        git tag -a "v${{ github.event.inputs.version }}" -m "Release version ${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"
        
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract release notes from CHANGELOG.md
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        sed -n '/## \[Unreleased\]/,/## \[/p' CHANGELOG.md | head -n -1 | tail -n +2 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: SSH MCP Tools v${{ github.event.inputs.version }}
        body: |
          ## What's Changed
          
          ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          
          ## Installation
          
          ```bash
          pip install fastmcp-ssh-server==${{ github.event.inputs.version }}
          ```
          
          ## Quick Start
          
          ```bash
          fastmcp-ssh-server --host your-server.com --username your-user --tools-version v2
          ```
          
          See the [documentation](https://github.com/enwaiax/ssh-mcp#readme) for detailed usage instructions.
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: release-assets
        asset_content_type: application/zip